# Copyright (c) 2012-2020, Mark Peek <mark@peek.org>
# All rights reserved.
#
# See LICENSE file for full license.
#
# *** Do not modify - this file is autogenerated ***
# Resource specification version: 18.6.0


from . import AWSObject
from . import AWSProperty
from . import Tags
from .validators import boolean
from .validators import integer


class AclConfiguration(AWSProperty):
    props = {
        'AllowedGroupsColumnName': (str, True),
    }


class ChangeDetectingColumns(AWSProperty):
    props = {
        'ChangeDetectingColumns': ([str], False),
    }


class DataSourceToIndexFieldMapping(AWSProperty):
    props = {
        'DataSourceFieldName': (str, True),
        'DateFieldFormat': (str, False),
        'IndexFieldName': (str, True),
    }


class DataSourceToIndexFieldMappingList(AWSProperty):
    props = {
        'DataSourceToIndexFieldMappingList':
            ([DataSourceToIndexFieldMapping], False),
    }


class ColumnConfiguration(AWSProperty):
    props = {
        'ChangeDetectingColumns': (ChangeDetectingColumns, True),
        'DocumentDataColumnName': (str, True),
        'DocumentIdColumnName': (str, True),
        'DocumentTitleColumnName': (str, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
    }


class ConnectionConfiguration(AWSProperty):
    props = {
        'DatabaseHost': (str, True),
        'DatabaseName': (str, True),
        'DatabasePort': (integer, True),
        'SecretArn': (str, True),
        'TableName': (str, True),
    }


class DataSourceVpcConfiguration(AWSProperty):
    props = {
        'SecurityGroupIds': ([str], True),
        'SubnetIds': ([str], True),
    }


class SqlConfiguration(AWSProperty):
    props = {
        'QueryIdentifiersEnclosingOption': (str, False),
    }


class DatabaseConfiguration(AWSProperty):
    props = {
        'AclConfiguration': (AclConfiguration, False),
        'ColumnConfiguration': (ColumnConfiguration, True),
        'ConnectionConfiguration': (ConnectionConfiguration, True),
        'DatabaseEngineType': (str, True),
        'SqlConfiguration': (SqlConfiguration, False),
        'VpcConfiguration': (DataSourceVpcConfiguration, False),
    }


class DataSourceInclusionsExclusionsStrings(AWSProperty):
    props = {
        'DataSourceInclusionsExclusionsStrings': ([str], False),
    }


class OneDriveUserList(AWSProperty):
    props = {
        'OneDriveUserList': ([str], False),
    }


class S3Path(AWSProperty):
    props = {
        'Bucket': (str, True),
        'Key': (str, True),
    }


class OneDriveUsers(AWSProperty):
    props = {
        'OneDriveUserList': (OneDriveUserList, False),
        'OneDriveUserS3Path': (S3Path, False),
    }


class OneDriveConfiguration(AWSProperty):
    props = {
        'ExclusionPatterns': (DataSourceInclusionsExclusionsStrings, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
        'InclusionPatterns': (DataSourceInclusionsExclusionsStrings, False),
        'OneDriveUsers': (OneDriveUsers, True),
        'SecretArn': (str, True),
        'TenantDomain': (str, True),
    }


class AccessControlListConfiguration(AWSProperty):
    props = {
        'KeyPath': (str, False),
    }


class DocumentsMetadataConfiguration(AWSProperty):
    props = {
        'S3Prefix': (str, False),
    }


class S3DataSourceConfiguration(AWSProperty):
    props = {
        'AccessControlListConfiguration':
            (AccessControlListConfiguration, False),
        'BucketName': (str, True),
        'DocumentsMetadataConfiguration':
            (DocumentsMetadataConfiguration, False),
        'ExclusionPatterns': (DataSourceInclusionsExclusionsStrings, False),
        'InclusionPrefixes': (DataSourceInclusionsExclusionsStrings, False),
    }


class SalesforceChatterFeedIncludeFilterTypes(AWSProperty):
    props = {
        'SalesforceChatterFeedIncludeFilterTypes': ([str], False),
    }


class SalesforceChatterFeedConfiguration(AWSProperty):
    props = {
        'DocumentDataFieldName': (str, True),
        'DocumentTitleFieldName': (str, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
        'IncludeFilterTypes':
            (SalesforceChatterFeedIncludeFilterTypes, False),
    }


class SalesforceCustomKnowledgeArticleTypeConfiguration(AWSProperty):
    props = {
        'DocumentDataFieldName': (str, True),
        'DocumentTitleFieldName': (str, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
        'Name': (str, True),
    }


class SalesforceCustomKnowledgeArticleTypeConfigurationList(AWSProperty):
    props = {
        'SalesforceCustomKnowledgeArticleTypeConfigurationList':
            ([SalesforceCustomKnowledgeArticleTypeConfiguration], False),
    }


class SalesforceKnowledgeArticleStateList(AWSProperty):
    props = {
        'SalesforceKnowledgeArticleStateList': ([str], False),
    }


class SalesforceStandardKnowledgeArticleTypeConfiguration(AWSProperty):
    props = {
        'DocumentDataFieldName': (str, True),
        'DocumentTitleFieldName': (str, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
    }


class SalesforceKnowledgeArticleConfiguration(AWSProperty):
    props = {
        'CustomKnowledgeArticleTypeConfigurations':
            (SalesforceCustomKnowledgeArticleTypeConfigurationList, False),
        'IncludedStates': (SalesforceKnowledgeArticleStateList, True),
        'StandardKnowledgeArticleTypeConfiguration':
            (SalesforceStandardKnowledgeArticleTypeConfiguration, False),
    }


class SalesforceStandardObjectAttachmentConfiguration(AWSProperty):
    props = {
        'DocumentTitleFieldName': (str, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
    }


class SalesforceStandardObjectConfiguration(AWSProperty):
    props = {
        'DocumentDataFieldName': (str, True),
        'DocumentTitleFieldName': (str, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
        'Name': (str, True),
    }


class SalesforceStandardObjectConfigurationList(AWSProperty):
    props = {
        'SalesforceStandardObjectConfigurationList':
            ([SalesforceStandardObjectConfiguration], False),
    }


class SalesforceConfiguration(AWSProperty):
    props = {
        'ChatterFeedConfiguration':
            (SalesforceChatterFeedConfiguration, False),
        'CrawlAttachments': (boolean, False),
        'ExcludeAttachmentFilePatterns':
            (DataSourceInclusionsExclusionsStrings, False),
        'IncludeAttachmentFilePatterns':
            (DataSourceInclusionsExclusionsStrings, False),
        'KnowledgeArticleConfiguration':
            (SalesforceKnowledgeArticleConfiguration, False),
        'SecretArn': (str, True),
        'ServerUrl': (str, True),
        'StandardObjectAttachmentConfiguration':
            (SalesforceStandardObjectAttachmentConfiguration, False),
        'StandardObjectConfigurations':
            (SalesforceStandardObjectConfigurationList, False),
    }


class ServiceNowKnowledgeArticleConfiguration(AWSProperty):
    props = {
        'CrawlAttachments': (boolean, False),
        'DocumentDataFieldName': (str, True),
        'DocumentTitleFieldName': (str, False),
        'ExcludeAttachmentFilePatterns':
            (DataSourceInclusionsExclusionsStrings, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
        'IncludeAttachmentFilePatterns':
            (DataSourceInclusionsExclusionsStrings, False),
    }


class ServiceNowServiceCatalogConfiguration(AWSProperty):
    props = {
        'CrawlAttachments': (boolean, False),
        'DocumentDataFieldName': (str, True),
        'DocumentTitleFieldName': (str, False),
        'ExcludeAttachmentFilePatterns':
            (DataSourceInclusionsExclusionsStrings, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
        'IncludeAttachmentFilePatterns':
            (DataSourceInclusionsExclusionsStrings, False),
    }


class ServiceNowConfiguration(AWSProperty):
    props = {
        'HostUrl': (str, True),
        'KnowledgeArticleConfiguration':
            (ServiceNowKnowledgeArticleConfiguration, False),
        'SecretArn': (str, True),
        'ServiceCatalogConfiguration':
            (ServiceNowServiceCatalogConfiguration, False),
        'ServiceNowBuildVersion': (str, True),
    }


class SharePointConfiguration(AWSProperty):
    props = {
        'CrawlAttachments': (boolean, False),
        'DocumentTitleFieldName': (str, False),
        'ExclusionPatterns': (DataSourceInclusionsExclusionsStrings, False),
        'FieldMappings': (DataSourceToIndexFieldMappingList, False),
        'InclusionPatterns': (DataSourceInclusionsExclusionsStrings, False),
        'SecretArn': (str, True),
        'SharePointVersion': (str, True),
        'Urls': ([str], True),
        'UseChangeLog': (boolean, False),
        'VpcConfiguration': (DataSourceVpcConfiguration, False),
    }


class DataSourceConfiguration(AWSProperty):
    props = {
        'DatabaseConfiguration': (DatabaseConfiguration, False),
        'OneDriveConfiguration': (OneDriveConfiguration, False),
        'S3Configuration': (S3DataSourceConfiguration, False),
        'SalesforceConfiguration': (SalesforceConfiguration, False),
        'ServiceNowConfiguration': (ServiceNowConfiguration, False),
        'SharePointConfiguration': (SharePointConfiguration, False),
    }


class DataSource(AWSObject):
    resource_type = "AWS::Kendra::DataSource"

    props = {
        'DataSourceConfiguration': (DataSourceConfiguration, True),
        'Description': (str, False),
        'IndexId': (str, True),
        'Name': (str, True),
        'RoleArn': (str, True),
        'Schedule': (str, False),
        'Tags': (Tags, False),
        'Type': (str, True),
    }


class Faq(AWSObject):
    resource_type = "AWS::Kendra::Faq"

    props = {
        'Description': (str, False),
        'FileFormat': (str, False),
        'IndexId': (str, True),
        'Name': (str, True),
        'RoleArn': (str, True),
        'S3Path': (S3Path, True),
        'Tags': (Tags, False),
    }


class CapacityUnitsConfiguration(AWSProperty):
    props = {
        'QueryCapacityUnits': (integer, True),
        'StorageCapacityUnits': (integer, True),
    }


class ValueImportanceItem(AWSProperty):
    props = {
        'Key': (str, False),
        'Value': (integer, False),
    }


class ValueImportanceItems(AWSProperty):
    props = {
        'ValueImportanceItems': ([ValueImportanceItem], False),
    }


class Relevance(AWSProperty):
    props = {
        'Duration': (str, False),
        'Freshness': (boolean, False),
        'Importance': (integer, False),
        'RankOrder': (str, False),
        'ValueImportanceItems': (ValueImportanceItems, False),
    }


class Search(AWSProperty):
    props = {
        'Displayable': (boolean, False),
        'Facetable': (boolean, False),
        'Searchable': (boolean, False),
        'Sortable': (boolean, False),
    }


class DocumentMetadataConfiguration(AWSProperty):
    props = {
        'Name': (str, True),
        'Relevance': (Relevance, False),
        'Search': (Search, False),
        'Type': (str, True),
    }


class DocumentMetadataConfigurationList(AWSProperty):
    props = {
        'DocumentMetadataConfigurationList':
            ([DocumentMetadataConfiguration], False),
    }


class ServerSideEncryptionConfiguration(AWSProperty):
    props = {
        'KmsKeyId': (str, False),
    }


class Index(AWSObject):
    resource_type = "AWS::Kendra::Index"

    props = {
        'CapacityUnits': (CapacityUnitsConfiguration, False),
        'Description': (str, False),
        'DocumentMetadataConfigurations':
            (DocumentMetadataConfigurationList, False),
        'Edition': (str, True),
        'Name': (str, True),
        'RoleArn': (str, True),
        'ServerSideEncryptionConfiguration':
            (ServerSideEncryptionConfiguration, False),
        'Tags': (Tags, False),
    }
